generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id                 String        @id @default(cuid())
  name               String?
  email              String?       @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  stripe_customer_id String?       @unique @db.VarChar
  display_name       String?       @db.VarChar
  subscription_id    String?
  todo               Todo[]
  subscription       Subscription? @relation(fields: [subscription_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  subtodos           SubTodo[]     // Add this line to establish the relation
  dayPlanner         DayPlanner[]  // Add this line to establish the relation
  events             Event[]       // Add this line to establish the relation
  dayPlannerRow      DayPlannerRow[] // Add this line to establish the relation
  dayPlannerConfig   DayPlannerConfig[] // Add this line to establish the relation

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Subscription {
  id               String    @id @unique
  price_id         String
  status           String
  period_ends_at   DateTime? @db.Timestamp(6)
  user             User[]

  @@map(name: "subscriptions")
}

model Todo {
  id          Int       @id @default(autoincrement())
  index       Int?
  title       String?   @db.VarChar
  description String?   @db.VarChar
  dueDate     DateTime? // Field for due date
  createdAt   DateTime  @default(now()) // Track creation time
  completed   Boolean   @default(false) // Indicates if the todo is completed
  completedAt DateTime? // Time of completion, null if not completed
  priority    Priority  @default(LOW) // Enum for priority
  user_id     String?
  author      String?   @db.VarChar
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subtodos    SubTodo[]
  dayPlanner  DayPlanner? @relation(fields: [dayPlannerId], references: [id])
  dayPlannerId Int?
  dayPlannerRow DayPlannerRow[] @relation("DayPlannerToToDo")

  @@map(name: "todos")
}

model SubTodo {
  id          Int       @id @default(autoincrement())
  index       Int?
  title       String?   @db.VarChar
  description String?   @db.VarChar
  dueDate     DateTime? // Field for due date
  createdAt   DateTime  @default(now()) // Track creation time
  completed   Boolean   @default(false) // Indicates if the subtodo is completed
  completedAt DateTime? // Time of completion, null if not completed
  priority    Priority  @default(MEDIUM) // Enum for priority
  todo_id     Int?
  todo        Todo?     @relation(fields: [todo_id], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String?
  author      String?   @db.VarChar
  @@map(name: "subtodos")
}

model DayPlanner {
  id          Int            @id @default(autoincrement())
  date        DateTime       @unique
  events      Event[]
  user        User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String?
  todos       Todo[]
  dayPlannerRow DayPlannerRow[] @relation("DayPlannerToDayPlannerRow") // Establish the relation with a custom name

  @@map(name: "day_planners")
}

model DayPlannerRow {
  id          Int                @id @default(autoincrement())
  title       String?            @db.VarChar
  index       Int               @default(autoincrement()) 
  num_cols    Int
  num_rows    Int
  category    PlannerRowCategory
  dayPlanner  DayPlanner[]       @relation("DayPlannerToDayPlannerRow") // Use the same custom name for back-relation
  todos       Todo[]   @relation("DayPlannerToToDo") // Use the same custom name for back-relation
  user        User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String?


  @@map(name: "day_planner_rows")
}

model DayPlannerConfig {
  id          Int                @id @default(autoincrement())
  category    String
  user        User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String?
  index       Int


  @@map(name: "day_planner_configs")
}


model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  dayPlanner  DayPlanner @relation(fields: [dayPlannerId], references: [id])
  dayPlannerId Int
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String?

  @@map(name: "events")
}


// Enum for priority levels
enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum PlannerRowCategory {
  HEALTH
  CAREER
  WORK
  SCHOOL
  HOME
}
